define("Numbers/JSNumber",[],function(){function e(e){if(e.toNumber)return e.toNumber();if(typeof e=="number")return e;throw"NaN"}var t=function(){var t=function(t){t=e(t),this.toNumber=function(){return t}};return t.prototype={isZero:function(e){return e||(e=1e-6),this.abs().toNumber()<e},equals:function(t,n){return t=e(t),n||(n=1e-6),this.subtract(t).abs().toNumber()<n},negative:function(){return new t(-this.toNumber())},abs:function(){var e=this.toNumber();return new t(e<0?-e:e)},inverse:function(){return new t(1/value)},add:function(n){return n=e(n),new t(this.toNumber()+n)},subtract:function(n){return n=e(n),new t(this.toNumber()-n)},multiply:function(n){return n=e(n),new t(this.toNumber()*n)},divide:function(n){return n=e(n),new t(this.toNumber()/n)},toString:function(){return this.toNumber().toString()}},t}();return t.Zero={toNumber:function(){return 0},isZero:function(){return!0},equals:function(n,r){return n=e(n),n.equals(t.Zero)},negative:function(){return t.Zero},abs:function(){return 0},inverse:function(){return new t(1/0)},add:function(t){return t=e(t),t},subtract:function(t){return t=e(t),t.negative()},multiply:function(){return t.Zero},divide:function(){return t.Zero},toString:function(){return 0..toString()}},t}),define("Matrix/Vector",["Numbers/JSNumber"],function(e){var t=function(){var t=function(){var t,n;if(arguments[0]instanceof Array){t=arguments[0].length,n=new Array(t);for(var r=0;r<t;r++)n[r]=new e(arguments[0][r])}else typeof arguments[0]=="number"&&(t=arguments[0],n=new Array(t));this.getLength=function(){return t},this.getValue=function(e){return n[e]},this.setValue=function(t,r){if(!r.toNumber){if(typeof r!="number")throw"not a number type!";r=new e(r)}n[t]=r},this.toArray=function(){var e=new Array(this.getLength());for(var t=0;t<e.length;t++)e[t]=this.getValue(t);return e}};return t.prototype={negative:function(){var e=new t(this.getLength());for(var n=0;n<e.getLength();n++)e.setValue(n,this.getValue(n).negative());return e},add:function(e){if(this.getLength()!==e.getLength())throw"The vectors must have the same length!";var n=new t(this.getLength());for(var r=0;r<n.getLength();r++)n.setValue(r,this.getValue(r).add(e.getValue(r)));return n},subtract:function(e){if(this.getLength()!==e.getLength())throw"The vectors must have the same length!";var n=new t(this.getLength());for(var r=0;r<n.getLength();r++)n.setValue(r,this.getValue(r).subtract(e.getValue(r)));return n},multiply:function(n){if(!n.toNumber){if(typeof n!="number")throw"value must be number!";n=new e(n)}var r=new t(this.getLength());for(var i=0;i<r.getLength();i++)r.setValue(i,this.getValue(i).multiply(n));return r},divide:function(e){if(!e.toNumber&&typeof e!="number")throw"value must be number!";var n=new t(this.getLength());for(var r=0;r<n.getLength();r++)n.setValue(r,this.getValue(r).divide(e));return n},dot:function(e){if(this.getLength()!==e.getLength())throw"The vectors must have the same length!";var t=null;for(var n=0;n<this.getLength();n++){var r=this.getValue(n).multiply(e.getValue(n));t=t?t.add(r):r}return t},toString:function(){var e="[";for(var t=0;t<this.getLength();t++)e+=this.getValue(t),t!=this.getLength()-1&&(e+=",");return e+="]",e}},t}();return t}),define("Matrix/Matrix",["Numbers/JSNumber","Matrix/Vector"],function(e,t){var n=function(){var n=function(t,n){var r=new Array(t*n);this.getNumRows=function(){return t},this.getNumColumns=function(){return n},this.getValue=function(e,t){return r[n*e+t]},this.setValue=function(t,i,s){if(!s.toNumber){if(typeof s!="number")throw"not a number type!";s=new e(s)}r[n*t+i]=s};for(var i=0;i<t;i++)for(var s=0;s<n;s++)this.setValue(i,s,e.Zero)};return n.prototype={setRow:function(e,n){if(!(n instanceof Array)){if(!(n instanceof t))throw"value must be an Array or Vector";n=n.toArray()}var r=Math.min(n.length,this.getNumColumns());for(var i=0;i<r;i++)this.setValue(e,i,n[i])},setColumn:function(e,n){if(!(n instanceof Array)){if(!(n instanceof t))throw"value must be an Array or Vector";n=n.toArray()}var r=Math.min(n.length,this.getNumRows());for(var i=0;i<r;i++)this.setValue(i,e,n[i])},setMatrix:function(e){if(!(e instanceof Array))throw"value must be an array!";var t=Math.min(e.length,this.getNumRows());for(var n=0;n<t;n++)this.setRow(n,e[n])},getRow:function(e){var n=new Array(this.getNumColumns());for(var r=0;r<n.length;r++)n[r]=this.getValue(e,r);return new t(n)},getColumn:function(e){var n=new Array(this.getNumRows());for(var r=0;r<n.length;r++)n[r]=this.getValue(r,e);return new t(n)},copy:function(){var e=new n(this.getNumRows(),this.getNumColumns());for(var t=0;t<e.getNumRows();t++)for(var r=0;r<e.getNumColumns();r++)e.setValue(t,r,this.getValue(t,r));return e},swapRows:function(e,t){if(e!==t){var n=this.getRow(e);this.setRow(e,this.getRow(t)),this.setRow(t,n)}},equals:function(e){if(e instanceof n){if(e.getNumRows()!==this.getNumRows()&&e.getNumColumns()!==this.getNumColumns())throw"Matrices must be same size.";for(var t=0;t<this.getNumRows();t++)for(var r=0;r<this.getNumColumns();r++)if(!this.getValue(t,r).equals(e.getValue(t,r)))return!1;return!0}throw"Must be of type Matrix."},determinant:function(){if(this.getNumRows()!==this.getNumColumns())throw"n x n Matrix required to determine determinant.";var e=this.getNumColumns();if(e===2){var t=this.getValue(0,0).multiply(this.getValue(1,1)),r=this.getValue(0,1).multiply(this.getValue(1,0));return t.subtract(r)}var i=null;for(var s=0;s<e;s++){var o=new n(e-1,e-1),u=0;for(var a=0;a<e;a++)if(a!=s){var f=this.getColumn(a).toArray().slice(1,e);o.setColumn(u++,f)}var l=this.getValue(0,s).multiply(o.determinant());i=i?s%2?i.subtract(l):i.add(l):l}return i},add:function(e){if(!(e instanceof n))throw"input must be Matrix";if(this.getNumColumns()!=e.getNumColumns()&&this.getNumRows()!=e.getNumRows())throw"Both matrices must be m x n.";var t=new n(this.getNumRows(),this.getNumColumns());for(var r=0;r<t.getNumRows();r++)for(var i=0;i<t.getNumColumns();i++)t.setValue(r,i,this.getValue(r,i).add(e.getValue(r,i)))},subtract:function(e){if(!(e instanceof n))throw"input must be Matrix";if(this.getNumColumns()!=e.getNumColumns()&&this.getNumRows()!=e.getNumRows())throw"Both matrices must be m x n.";var t=new n(this.getNumRows(),this.getNumColumns());for(var r=0;r<t.getNumRows();r++)for(var i=0;i<t.getNumColumns();i++)t.setValue(r,i,this.getValue(r,i).subtract(e.getValue(r,i)))},multiply:function(){if(arguments[0]instanceof n){var e=arguments[0];if(this.getNumColumns()!=e.getNumRows())throw"This matrices number of columns must equal input's number of rows.";var r=new n(this.getNumRows(),e.getNumColumns());for(var i=0;i<r.getNumColumns();i++)for(var s=0;s<r.getNumRows();s++){var o=this.getRow(s),u=e.getColumn(i),a=o.dot(u);r.setValue(s,i,a)}return r}if(arguments[0]instanceof t){var f=arguments[0];if(this.getNumColumns()!=f.getLength())throw"The vector must be in R^n";var r=new t(f.getLength());for(var s=0;s<r.getNumRows();s++){var o=this.getRow(s),a=o.dot(f);r.setValue(s,a)}return r}var l=arguments[0];if(!l.toNumber&&typeof l!="number")throw"input must be Matrix, Vector, or Number";var r=new n(this.getNumRows(),this.getNumColumns());for(var s=0;s<r.getNumRows();s++)for(var i=0;i<r.getNumColumns();i++)r.setValue(s,i,this.getValue(s,i).multiply(l));return r},rowReduce:function(){var e=this;if(this.getNumRows()>this.getNumColumns())throw"m must be <= n";var t=0,n=0,r=this.copy();for(var i=0;i<r.getNumRows();i++){var s=function(){while(t<r.getNumColumns()){for(var e=n;e<r.getNumRows();e++)if(!r.getValue(e,t).isZero())return e;t++}throw"Not reducible."}();r.swapRows(s,n);var o=r.getValue(n,t),u=r.getRow(n).divide(o);r.setRow(n,u);for(var a=0;a<r.getNumRows();a++)if(a!==i){var f=r.getValue(a,t).negative(),l=r.getRow(a).add(u.multiply(f));r.setRow(a,l)}n++,t++}return r},inverse:function(){if(this.getNumRows()!==this.getNumColumns())throw"n x n Matrix required to determine inverse.";var e=n.Identity(this.getNumRows()),t=new n(this.getNumRows(),this.getNumColumns()*2);for(var r=0;r<this.getNumColumns();r++)t.setColumn(r,this.getColumn(r));for(var r=this.getNumColumns();r<this.getNumColumns()*2;r++)t.setColumn(r,e.getColumn(r-this.getNumColumns()));var i=t.rowReduce();for(var r=0;r<this.getNumColumns();r++)for(var s=0;s<this.getNumRows();s++){var o;r===s?o=i.getValue(s,r).equals(1):o=i.getValue(s,r).isZero();if(!o)throw"could not be inverted!"}var e=new n(this.getNumRows(),this.getNumColumns());for(var r=0;r<this.getNumColumns();r++)e.setColumn(r,i.getColumn(r+this.getNumColumns()));return e},toString:function(){var e="[";for(var t=0;t<this.getNumRows();t++)e+=this.getRow(t),t!=this.getNumRows()-1&&(e+=",");return e+="]",e}},n.Identity=function(e){var t=new n(e,e);for(var r=0;r<e;r++)t.setValue(r,r,1);return t},n}();return n}),define("Math",["Matrix/Matrix","Matrix/Vector","Numbers/JSNumber"],function(e,t,n){return{Matrix:{Matrix:e,Vector:t},Numbers:{JSNumber:n}}});